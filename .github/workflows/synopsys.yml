# This is a basic workflow to help you get started with Actions
# Instructions:
# Please add following repository secrets by clicking settings > Secrets > New repository secret
# DOCKER_USERNAME
# DOCKER_TOKEN
# BLACKDUCK_TOKEN
# BLACKDUCK_URL
# POLARIS_SERVER_URL
# POLARIS_ACCESS_TOKEN
# SLACK_CHANNEL_ID
# SLACK_TOKEN
# POSTGRES_PASSWORD
# POSTGRES_USERNAME

# Update docker commands by replacing placeholders <<insert ioiq docker image location>> and <<insert ioworkflowengine docker image location>> with 
# docker image location for io-iq and io-workflowengine respectively in this file.

name: synopsys_IO

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      # If this run was triggered by a pull request event, then checkout
      # the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}

      - name: Start IO Server
        run: |
          docker network create -d bridge ionet
          docker login --username ${{secrets.DOCKER_USERNAME}} --password ${{secrets.DOCKER_TOKEN}}
          docker pull akshayme/io-ioiq:1.0.314
          docker pull akshayme/io-workflowengine:1.0.2107
          docker run --name postgres-io --network=ionet --expose=5432 -p 5432:5432 -e POSTGRES_USER=${{secrets.POSTGRES_USERNAME}} -e POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} -e POSTGRES_DB=io-db postgres:12 &
          sleep 30
          docker run --name io-iq -p 9090:9090 --network=ionet -e spring.datasource.url=jdbc:postgresql://postgres-io:5432/io-db -e spring.datasource.username=${{secrets.POSTGRES_USERNAME}} -e spring.datasource.password=${{secrets.POSTGRES_PASSWORD}} akshayme/io-ioiq:1.0.314 &
          docker run --name io-workflowengine -p 9091:9091 --network=ionet akshayme/io-workflowengine:1.0.2107 &
      
      - name: Check IO Server Status
        run: | 
          sleep 45
          curl http://localhost:9090/actuator/health
          curl http://localhost:9091/actuator/health
      
      - name: Synopsys Intelligent Security Scan
        id: prescription
        uses: synopsys-sig/intelligent-security-scan@v1.0.3
        with:
          additionalWorkflowArgs: --persona=developer --release.type=major 
                    --polaris.url=${{secrets.POLARIS_SERVER_URL}} --polaris.token=${{secrets.POLARIS_ACCESS_TOKEN}} 
                    --sensitive.package.pattern='.*(\\+\\+\\+.*(com\\/example\\/security)).*'
          stage: "IO"
      
      # # Please note that the ID in previous step was set to prescription
      # # in order for this logic to work also make sure that POLARIS_ACCESS_TOKEN
      # # is defined in settings
      # - name: Static Analysis with Polaris
      #   if: ${{steps.prescription.outputs.sastScan == 'true' }}
      #   run: |
      #       export POLARIS_SERVER_URL=${{ secrets.POLARIS_SERVER_URL}}
      #       export POLARIS_ACCESS_TOKEN=${{ secrets.POLARIS_ACCESS_TOKEN}}
      #       wget -q ${{ secrets.POLARIS_SERVER_URL}}/api/tools/polaris_cli-linux64.zip
      #       unzip -j polaris_cli-linux64.zip -d /tmp
      #       /tmp/polaris analyze -w
      
      # # Please note that the ID in previous step was set to prescription
      # # in order for this logic to work
      # - name: Software Composition Analysis with Black Duck
      #   if: ${{steps.prescription.outputs.scaScan == 'true' }}
      #   uses: blackducksoftware/github-action@v2
      #   with:
      #     args: '--blackduck.url="${{ secrets.BLACKDUCK_URL}}" --blackduck.api.token="${{ secrets.BLACKDUCK_TOKEN}}" --detect.tools="SIGNATURE_SCAN,DETECTOR" --detect.project.name="github-io-sample" --detect.project.version.name="1.0.0"'
      
      - name: Synopsys Intelligent Security Scan
        if: ${{ steps.prescription.outputs.sastScan == 'true' || steps.prescription.outputs.scaScan == 'true' }}
        uses: synopsys-sig/intelligent-security-scan@v1.0.3
        with:
          additionalWorkflowArgs: --slack.channel.id=${{secrets.SLACK_CHANNEL_ID}} --slack.token=${{secrets.SLACK_TOKEN}} 
                  --IS_SAST_ENABLED=${{steps.prescription.outputs.sastScan}} --IS_SCA_ENABLED=${{steps.prescription.outputs.scaScan}} 
                  --polaris.project.name=sig-devsecops/github-io-sample --polaris.url=${{secrets.POLARIS_SERVER_URL}} --polaris.token=${{secrets.POLARIS_ACCESS_TOKEN}} 
                  --blackduck.project.name=github-io-sample:1.0.0 --blackduck.url=${{secrets.BLACKDUCK_URL}} --blackduck.api.token=${{secrets.BLACKDUCK_TOKEN}}
                  --jira.project.name=TES --jira.api.url=${{secrets.JIRA_SERVER_URL}}
                  --jira.username=${{secrets.JIRA_USERNAME}} --jira.auth.token=${{secrets.JIRA_AUTH_TOKEN}}
          stage: "WORKFLOW"
      
      - name: Upload SARIF file
        if: ${{steps.prescription.outputs.sastScan == 'true' }}
        uses: github/codeql-action/upload-sarif@v1
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: workflowengine-results.sarif.json
